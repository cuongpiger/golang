// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	project "github.com/cuongpiger/golang"
	mock "github.com/stretchr/testify/mock"
)

// UserClient is an autogenerated mock type for the UserClient type
type UserClient struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserClient) GetUserByID(id int) (*project.User, error) {
	ret := _m.Called(id)

	var r0 *project.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*project.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *project.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserClient creates a new instance of UserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserClient(t mockConstructorTestingTNewUserClient) *UserClient {
	mock := &UserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
